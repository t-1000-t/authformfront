{"version":3,"file":"static/js/217.d766bbf0.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/media-query/src/use-breakpoint.ts","../node_modules/@chakra-ui/media-query/src/use-media-query.ts","../node_modules/@chakra-ui/media-query/src/use-breakpoint-value.ts","../node_modules/@chakra-ui/media-query/src/media-query.utils.ts","pages/Contact/components/ContactMe.js","pages/Contact/components/ContactForm.js","pages/Contact/index.js","../node_modules/@chakra-ui/layout/src/stack/v-stack.tsx","../node_modules/@chakra-ui/textarea/src/textarea.tsx","../node_modules/utilities/object-utils/src/omit.ts"],"sourcesContent":["import { useTheme } from \"@chakra-ui/system\"\nimport { isObject } from \"@chakra-ui/shared-utils\"\nimport { useMediaQuery } from \"./use-media-query\"\n\nexport type UseBreakpointOptions = {\n  ssr?: boolean\n  fallback?: string\n}\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent.\n */\nexport function useBreakpoint(arg?: string | UseBreakpointOptions) {\n  const opts = isObject(arg) ? arg : { fallback: arg ?? \"base\" }\n  const theme = useTheme()\n\n  const breakpoints = theme.__breakpoints!.details.map(\n    ({ minMaxQuery, breakpoint }) => ({\n      breakpoint,\n      query: minMaxQuery.replace(\"@media screen and \", \"\"),\n    }),\n  )\n\n  const fallback = breakpoints.map((bp) => bp.breakpoint === opts.fallback)\n  const values = useMediaQuery(\n    breakpoints.map((bp) => bp.query),\n    { fallback, ssr: opts.ssr },\n  )\n\n  const index = values.findIndex((value) => value == true)\n  return breakpoints[index]?.breakpoint ?? opts.fallback\n}\n","import { useEnvironment } from \"@chakra-ui/react-env\"\nimport { useEffect, useState } from \"react\"\n\nexport type UseMediaQueryOptions = {\n  fallback?: boolean | boolean[]\n  ssr?: boolean\n}\n\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n * @param options the media query options { fallback, ssr }\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-media-query\n */\nexport function useMediaQuery(\n  query: string | string[],\n  options: UseMediaQueryOptions = {},\n): boolean[] {\n  const { ssr = true, fallback } = options\n\n  const { getWindow } = useEnvironment()\n\n  const queries = Array.isArray(query) ? query : [query]\n\n  let fallbackValues = Array.isArray(fallback) ? fallback : [fallback]\n  fallbackValues = fallbackValues.filter((v) => v != null) as boolean[]\n\n  const [value, setValue] = useState(() => {\n    return queries.map((query, index) => ({\n      media: query,\n      matches: ssr\n        ? !!fallbackValues[index]\n        : getWindow().matchMedia(query).matches,\n    }))\n  })\n\n  useEffect(() => {\n    const win = getWindow()\n    setValue(\n      queries.map((query) => ({\n        media: query,\n        matches: win.matchMedia(query).matches,\n      })),\n    )\n\n    const mql = queries.map((query) => win.matchMedia(query))\n\n    const handler = (evt: MediaQueryListEvent) => {\n      setValue((prev) => {\n        return prev.slice().map((item) => {\n          if (item.media === evt.media) return { ...item, matches: evt.matches }\n          return item\n        })\n      })\n    }\n\n    mql.forEach((mql) => {\n      if (typeof mql.addListener === \"function\") {\n        mql.addListener(handler)\n      } else {\n        mql.addEventListener(\"change\", handler)\n      }\n    })\n\n    return () => {\n      mql.forEach((mql) => {\n        if (typeof mql.removeListener === \"function\") {\n          mql.removeListener(handler)\n        } else {\n          mql.removeEventListener(\"change\", handler)\n        }\n      })\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [getWindow])\n\n  return value.map((item) => item.matches)\n}\n","import { useTheme } from \"@chakra-ui/system\"\nimport { isObject } from \"@chakra-ui/shared-utils\"\nimport { arrayToObjectNotation } from \"@chakra-ui/breakpoint-utils\"\nimport { getClosestValue } from \"./media-query.utils\"\nimport { useBreakpoint, UseBreakpointOptions } from \"./use-breakpoint\"\n\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-breakpoint-value\n */\nexport function useBreakpointValue<T = any>(\n  values: Partial<Record<string, T>> | Array<T | null>,\n  arg?: UseBreakpointOptions | string,\n): T | undefined {\n  const opts = isObject(arg) ? arg : { fallback: arg ?? \"base\" }\n  const breakpoint = useBreakpoint(opts)\n  const theme = useTheme()\n\n  if (!breakpoint) return\n\n  /**\n   * Get the sorted breakpoint keys from the provided breakpoints\n   */\n  const breakpoints = Array.from(theme.__breakpoints?.keys || [])\n\n  const obj = Array.isArray(values)\n    ? Object.fromEntries<any>(\n        Object.entries(arrayToObjectNotation(values, breakpoints)).map(\n          ([key, value]) => [key, value],\n        ),\n      )\n    : values\n\n  return getClosestValue(obj, breakpoint, breakpoints)\n}\n","import { breakpoints as defaultBreakPoints } from \"@chakra-ui/breakpoint-utils\"\n\nexport function getClosestValue<T = any>(\n  values: Record<string, T>,\n  breakpoint: string,\n  breakpoints = defaultBreakPoints,\n) {\n  let index = Object.keys(values).indexOf(breakpoint)\n\n  if (index !== -1) {\n    return values[breakpoint]\n  }\n\n  let stopIndex = breakpoints.indexOf(breakpoint)\n\n  while (stopIndex >= 0) {\n    const key = breakpoints[stopIndex]\n\n    if (values.hasOwnProperty(key)) {\n      index = stopIndex\n      break\n    }\n    stopIndex -= 1\n  }\n\n  if (index !== -1) {\n    const key = breakpoints[index]\n    return values[key]\n  }\n\n  return undefined\n}\n","import { Container, Heading, Text, useBreakpointValue } from '@chakra-ui/react'\n\nexport default function ContactMe() {\n  return (\n    <Container maxW={'5xl'} py={12} px={{ base: 6, md: 12 }}>\n      <Heading fontSize={{ base: '3xl', md: '4xl', lg: '6xl' }} textAlign={'center'}>\n        <Text\n          as={'span'}\n          position={'relative'}\n          _after={{\n            content: \"''\",\n            width: 'full',\n            height: useBreakpointValue({ base: '20%', md: '30%' }),\n            position: 'absolute',\n            bottom: 1,\n            left: 0,\n            bg: 'blue.400',\n            zIndex: -1,\n          }}\n        >\n          Contact Me\n        </Text>\n      </Heading>\n      <Text textAlign=\"center\" color={'gray.500'} fontSize={'xl'} p={2} fontWeight=\"semibold\">\n        If you have any queries feel free to contact me.\n      </Text>\n    </Container>\n  )\n}\n","import { useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport {\r\n  Box,\r\n  Button,\r\n  Input,\r\n  VStack,\r\n  FormControl,\r\n  Textarea,\r\n  InputGroup,\r\n  InputLeftElement,\r\n  chakra,\r\n} from '@chakra-ui/react'\r\nimport { FaUserAlt } from 'react-icons/fa'\r\nimport { MdEmail } from 'react-icons/md'\r\n\r\nfunction ContactForm() {\r\n  const history = useNavigate()\r\n\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [message, setMessage] = useState('')\r\n\r\n  const CFaUserAlt = chakra(FaUserAlt)\r\n  const CMdOutlineEmail = chakra(MdEmail)\r\n\r\n  function encode(data) {\r\n    console.log('data', data)\r\n    return Object.keys(data)\r\n      .map((key) => encodeURIComponent(key) + '=' + encodeURIComponent(data[key]))\r\n      .join('&')\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    fetch('/', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n      body: encode({\r\n        'form-name': event.target.getAttribute('name'),\r\n        name,\r\n        email,\r\n        message,\r\n      }),\r\n    })\r\n      .then(() => history.push('/success'))\r\n      .catch((error) => alert(error))\r\n  }\r\n\r\n  return (\r\n    <Box w={{ base: 'full', md: 'auto' }} pb={4} px={4}>\r\n      <form name=\"contact\" method=\"POST\" data-netlify=\"true\" onSubmit={handleSubmit}>\r\n        <input type=\"hidden\" name=\"form-name\" value=\"contact\" />\r\n        <VStack spacing={6} maxW=\"lg\" w={{ md: 'md' }} mx=\"auto\">\r\n          <FormControl id=\"lastName\">\r\n            <InputGroup>\r\n              <InputLeftElement pointerEvents=\"none\" children={<CFaUserAlt color=\"gray.300\" />} />\r\n              <Input\r\n                color=\"gray.700\"\r\n                value={name}\r\n                placeholder=\"name\"\r\n                onChange={(e) => setName(e.target.value)}\r\n                onBlur={(e) => setName(e.target.value.trim())}\r\n                required\r\n              />\r\n            </InputGroup>\r\n          </FormControl>\r\n          <FormControl id=\"email\">\r\n            <InputGroup>\r\n              <InputLeftElement pointerEvents=\"none\" children={<CMdOutlineEmail color=\"gray.300\" />} />\r\n              <Input\r\n                value={email}\r\n                type=\"email\"\r\n                placeholder=\"email address\"\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                onBlur={(e) => setEmail(e.target.value.trim())}\r\n                required\r\n              />\r\n            </InputGroup>\r\n          </FormControl>\r\n\r\n          <FormControl id=\"message\">\r\n            <Textarea\r\n              name=\"message\"\r\n              placeholder=\"Message\"\r\n              mt={1}\r\n              rows={6}\r\n              shadow=\"sm\"\r\n              focusBorderColor=\"brand.400\"\r\n              fontSize={{ sm: 'sm' }}\r\n              value={message}\r\n              onChange={(e) => setMessage(e.target.value)}\r\n              required\r\n            />\r\n          </FormControl>\r\n\r\n          <Button type=\"submit\" size=\"lg\" colorScheme=\"blue\">\r\n            Send Message\r\n          </Button>\r\n        </VStack>\r\n      </form>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default ContactForm\r\n","import Page from 'components/Page'\nimport { Box, Text } from '@chakra-ui/react'\n\nimport ContactMe from './components/ContactMe'\nimport ContactForm from './components/ContactForm'\n\nexport default function ContactDefault() {\n  return (\n    <Page>\n      <Box bg=\"white\">\n        <ContactMe />\n        <ContactForm />\n        <Text textAlign=\"center\" pb={6} color=\"gray.600\">\n          or email me at{' '}\n          <Box as=\"a\" href=\"mailto:testenet@ukr.net\" color=\"blue.500\">\n            testenet@ukr.net\n          </Box>\n        </Text>\n      </Box>\n    </Page>\n  )\n}\n","import { forwardRef } from \"@chakra-ui/system\"\n\nimport { Stack, StackProps } from \"./stack\"\n\n/**\n * A view that arranges its children in a vertical line.\n *\n * @see Docs https://chakra-ui.com/docs/components/stack\n */\nexport const VStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"column\" ref={ref} />\n))\n\nVStack.displayName = \"VStack\"\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { omit } from \"@chakra-ui/object-utils\"\n\ninterface TextareaOptions {\n  /**\n   * The border color when the textarea is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the textarea is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\"\n\nconst omitted = [\"h\", \"minH\", \"height\", \"minHeight\"]\n\nexport interface TextareaProps\n  extends Omit<HTMLChakraProps<\"textarea\">, Omitted>,\n    TextareaOptions,\n    FormControlOptions,\n    ThemingProps<\"Textarea\"> {}\n\n/**\n * Textarea is used to enter an amount of text that's longer than a single line\n * @see Docs https://chakra-ui.com/textarea\n */\nexport const Textarea = forwardRef<TextareaProps, \"textarea\">((props, ref) => {\n  const styles = useStyleConfig(\"Textarea\", props)\n  const { className, rows, ...rest } = omitThemingProps(props)\n\n  const textareaProps = useFormControl<HTMLTextAreaElement>(rest)\n\n  //@ts-ignore\n  const textareaStyles = rows ? omit(styles, omitted) : styles\n\n  return (\n    <chakra.textarea\n      ref={ref}\n      rows={rows}\n      {...textareaProps}\n      className={cx(\"chakra-textarea\", className)}\n      __css={textareaStyles}\n    />\n  )\n})\n\nTextarea.displayName = \"Textarea\"\n","export function omit<T extends Record<string, any>, K extends keyof T>(\n  object: T,\n  keysToOmit: K[] = [],\n) {\n  const clone: Record<string, unknown> = Object.assign({}, object)\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key as string]\n    }\n  }\n  return clone as Omit<T, K>\n}\n"],"names":["useBreakpoint","arg","_a","_b","opts","isObject","fallback","breakpoints","useTheme","__breakpoints","details","map","_ref","minMaxQuery","breakpoint","query","replace","bp","values","options","arguments","length","undefined","ssr","getWindow","useEnvironment","queries","Array","isArray","fallbackValues","filter","v","value","setValue","useState","query2","index","media","matches","matchMedia","useEffect","win","mql","handler","evt","prev","slice","item","forEach","mql2","addListener","addEventListener","removeListener","removeEventListener","useMediaQuery","findIndex","useBreakpointValue","theme","from","keys","defaultBreakPoints","Object","indexOf","stopIndex","key","hasOwnProperty","getClosestValue","fromEntries","entries","arrayToObjectNotation","ContactMe","_jsxs","Container","maxW","py","px","base","md","children","_jsx","Heading","fontSize","lg","textAlign","Text","as","position","_after","content","width","height","bottom","left","bg","zIndex","color","p","fontWeight","history","useNavigate","name","setName","email","setEmail","message","setMessage","CFaUserAlt","chakra","FaUserAlt","CMdOutlineEmail","MdEmail","Box","w","pb","method","onSubmit","event","data","preventDefault","fetch","headers","body","target","getAttribute","console","log","encodeURIComponent","join","then","push","catch","error","alert","type","VStack","spacing","mx","FormControl","id","InputGroup","InputLeftElement","pointerEvents","Input","placeholder","onChange","e","onBlur","trim","required","Textarea","mt","rows","shadow","focusBorderColor","sm","Button","size","colorScheme","ContactDefault","Page","ContactForm","href","forwardRef","props","ref","jsx","Stack","align","direction","displayName","omitted","styles","useStyleConfig","className","rest","omitThemingProps","textareaProps","useFormControl","textareaStyles","object","keysToOmit","clone","assign","omit","textarea","cx","__css"],"sourceRoot":""}