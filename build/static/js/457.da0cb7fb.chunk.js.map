{"version":3,"file":"static/js/457.da0cb7fb.chunk.js","mappings":"+LAKA,MAAMA,UAAgBC,IAAAA,MACpBC,OAAAA,GAEEC,KAAKC,KAAKC,YAAY,QAAS,0BAA2B,CACxDC,WAAY,GACZC,YAAa,IAEjB,CAEAC,MAAAA,GACEL,KAAKM,QAAQC,KAAKC,mBAAmB,WACrCR,KAAKS,IAAIC,KAAK,GAAI,GAAI,kCAAmC,CAAEC,SAAU,OAAQC,KAAM,YACnFZ,KAAKa,MAAMR,OAAO,CAChBS,IAAK,SACLC,OAAQf,KAAKa,MAAMG,qBAAqB,QAAS,CAAEC,MAAO,EAAGC,IAAK,KAClEC,UAAW,GACXC,QAAS,IAIXpB,KAAKqB,OAASrB,KAAKS,IAAIa,OAAO,IAAK,IAAK,SACxCtB,KAAKqB,OAAOE,SAAS,KACrBvB,KAAKqB,OAAOG,KAAK,UAGjBxB,KAAKyB,QAAUzB,KAAK0B,MAAMC,SAASC,mBAGnC5B,KAAK6B,KAAO7B,KAAK0B,MAAMC,SAASG,QAAQ,CACtCC,EAAGjC,IAAAA,MAAakC,SAASC,SAASC,EAClCC,EAAGrC,IAAAA,MAAakC,SAASC,SAASG,EAClCC,EAAGvC,IAAAA,MAAakC,SAASC,SAASK,EAClCC,EAAGzC,IAAAA,MAAakC,SAASC,SAASO,GAEtC,CAEAC,MAAAA,GAGMzC,KAAKyB,QAAQiB,KAAKC,QAAU3C,KAAK6B,KAAKM,EAAEQ,OAC1C3C,KAAKqB,OAAOuB,GAHA,GAIH5C,KAAKyB,QAAQoB,MAAMF,QAAU3C,KAAK6B,KAAKU,EAAEI,UAClD3C,KAAKqB,OAAOuB,GALA,GAQV5C,KAAKyB,QAAQqB,GAAGH,QAAU3C,KAAK6B,KAAKE,EAAEY,OACxC3C,KAAKqB,OAAO0B,GATA,GAUH/C,KAAKyB,QAAQuB,KAAKL,QAAU3C,KAAK6B,KAAKQ,EAAEM,UACjD3C,KAAKqB,OAAO0B,GAXA,GAed/C,KAAKqB,OAAOuB,EAAI9C,IAAAA,KAAYmD,MAAMjD,KAAKqB,OAAOuB,EAAG,EAAG5C,KAAKkD,KAAKC,OAAOC,OACrEpD,KAAKqB,OAAO0B,EAAIjD,IAAAA,KAAYmD,MAAMjD,KAAKqB,OAAO0B,EAAG,EAAG/C,KAAKkD,KAAKC,OAAOE,QAGnErD,KAAKyB,QAAQiB,KAAKC,QAClB3C,KAAKyB,QAAQoB,MAAMF,QACnB3C,KAAKyB,QAAQqB,GAAGH,QAChB3C,KAAKyB,QAAQuB,KAAKL,QAClB3C,KAAK6B,KAAKE,EAAEY,QACZ3C,KAAK6B,KAAKM,EAAEQ,QACZ3C,KAAK6B,KAAKQ,EAAEM,QACZ3C,KAAK6B,KAAKU,EAAEI,OAEZ3C,KAAKqB,OAAOG,KAAK,UAAU,IAE3BxB,KAAKqB,OAAOiC,KAAK,UACjBtD,KAAKqB,OAAOkC,SAAS,GAEzB,EAGF,MA4BA,EA5BmBC,KACjB,MAAMC,GAAUC,EAAAA,EAAAA,QAAO,MAoBvB,OAlBAC,EAAAA,EAAAA,WAAU,KACR,IAAKF,EAAQG,QAAS,MAAO,OAE7B,MAAMT,EAAS,CACbU,KAAM/D,IAAAA,KACNsD,MAAO,IACPC,OAAQ,IACRS,OAAQL,EAAQG,QAChBG,MAAOlE,GAGHqD,EAAO,IAAIpD,IAAAA,MAAYqD,GAE7B,MAAO,KACLD,EAAKc,SAAQ,KAEd,KAGDC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAAAC,UACRF,EAAAA,EAAAA,KAACG,EAAAA,EAAG,CAACC,IAAKZ,OC7FhB,EAJsBa,KACbL,EAAAA,EAAAA,KAACT,EAAU,G","sources":["pages/Game/Phaser/components/GamePhaser.jsx","pages/Game/Phaser/index.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport Phaser from 'phaser'\nimport { Box } from '@chakra-ui/react'\nimport Container from '../../../../layouts/Container'\n\nclass MyScene extends Phaser.Scene {\n  preload() {\n    // this.load.image('player', 'images/sprite_32x32.jpg')\n    this.load.spritesheet('robot', 'images/robot_attack.png', {\n      frameWidth: 64,\n      frameHeight: 96,\n    })\n  }\n\n  create() {\n    this.cameras.main.setBackgroundColor('#24252A')\n    this.add.text(20, 20, 'Use arrow keys or WASD to move!', { fontSize: '28px', fill: '#ffffff' })\n    this.anims.create({\n      key: 'attack',\n      frames: this.anims.generateFrameNumbers('robot', { start: 0, end: 15 }),\n      frameRate: 12,\n      repeat: -1,\n    })\n\n    // add the player sprite to the scene\n    this.player = this.add.sprite(200, 150, 'robot')\n    this.player.setScale(1.5) // double the size\n    this.player.play('attack')\n\n    // Set up keyboard inputs\n    this.cursors = this.input.keyboard.createCursorKeys()\n\n    // Add WASD keys\n    this.keys = this.input.keyboard.addKeys({\n      w: Phaser.Input.Keyboard.KeyCodes.W,\n      a: Phaser.Input.Keyboard.KeyCodes.A,\n      s: Phaser.Input.Keyboard.KeyCodes.S,\n      d: Phaser.Input.Keyboard.KeyCodes.D,\n    })\n  }\n\n  update() {\n    const speed = 4\n\n    if (this.cursors.left.isDown || this.keys.a.isDown) {\n      this.player.x -= speed\n    } else if (this.cursors.right.isDown || this.keys.d.isDown) {\n      this.player.x += speed\n    }\n\n    if (this.cursors.up.isDown || this.keys.w.isDown) {\n      this.player.y -= speed\n    } else if (this.cursors.down.isDown || this.keys.s.isDown) {\n      this.player.y += speed\n    }\n\n    // keep the player inside the games bounds\n    this.player.x = Phaser.Math.Clamp(this.player.x, 0, this.game.config.width)\n    this.player.y = Phaser.Math.Clamp(this.player.y, 0, this.game.config.height)\n\n    if (\n      this.cursors.left.isDown ||\n      this.cursors.right.isDown ||\n      this.cursors.up.isDown ||\n      this.cursors.down.isDown ||\n      this.keys.w.isDown ||\n      this.keys.a.isDown ||\n      this.keys.s.isDown ||\n      this.keys.d.isDown\n    ) {\n      this.player.play('attack', true)\n    } else {\n      this.player.stop('attack')\n      this.player.setFrame(0) // show idle frame\n    }\n  }\n}\n\nconst GamePhaser = () => {\n  const gameRef = useRef(null)\n\n  useEffect(() => {\n    if (!gameRef.current) return () => {}\n\n    const config = {\n      type: Phaser.AUTO,\n      width: 600,\n      height: 450,\n      parent: gameRef.current,\n      scene: MyScene,\n    }\n\n    const game = new Phaser.Game(config)\n\n    return () => {\n      game.destroy(true)\n    }\n  }, [])\n\n  return (\n    <Container>\n      <Box ref={gameRef} />\n    </Container>\n  )\n}\n\nexport default GamePhaser\n","import React from 'react'\n\nimport GamePhaser from './components/GamePhaser'\n\nconst PhaserDefault = () => {\n  return <GamePhaser />\n}\n\nexport default PhaserDefault\n"],"names":["MyScene","Phaser","preload","this","load","spritesheet","frameWidth","frameHeight","create","cameras","main","setBackgroundColor","add","text","fontSize","fill","anims","key","frames","generateFrameNumbers","start","end","frameRate","repeat","player","sprite","setScale","play","cursors","input","keyboard","createCursorKeys","keys","addKeys","w","Keyboard","KeyCodes","W","a","A","s","S","d","D","update","left","isDown","x","right","up","y","down","Clamp","game","config","width","height","stop","setFrame","GamePhaser","gameRef","useRef","useEffect","current","type","parent","scene","destroy","_jsx","Container","children","Box","ref","PhaserDefault"],"sourceRoot":""}