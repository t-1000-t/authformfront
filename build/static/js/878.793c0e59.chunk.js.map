{"version":3,"file":"static/js/878.793c0e59.chunk.js","mappings":"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","sources":["pages/Call/components/VideoBox.jsx","pages/Call/components/CallControls.jsx","services/getListUsers.js","utils/hooks/useCall.jsx","pages/Call/components/ListUsers.jsx","pages/Call/components/CallMe.jsx","pages/Call/index.jsx"],"sourcesContent":["import React from 'react'\nimport { Box } from '@chakra-ui/react'\nimport Draggable from 'react-draggable'\n\n// eslint-disable-next-line react/prop-types\nconst VideoBox = ({ streamRef, isOpponent }) => {\n  return (\n    <Draggable>\n      <Box h=\"136px\" w=\"136px\" rounded=\"full\" position=\"relative\" flexShrink={0} overflow=\"hidden\" bg=\"black\" mx={2}>\n        <video\n          ref={streamRef}\n          playsInline\n          muted={!isOpponent}\n          autoPlay\n          style={{\n            maxWidth: '100%',\n            objectFit: 'cover',\n            borderRadius: '50%',\n            transform: 'translate3d(0, 0, 0)',\n            width: '136px',\n            height: '136px',\n          }}\n        >\n          <track kind=\"captions\" />\n        </video>\n      </Box>\n    </Draggable>\n  )\n}\n\nexport default VideoBox\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Box, Button, Heading } from '@chakra-ui/react'\nimport { BellIcon } from '@chakra-ui/icons'\n\nconst CallControls = ({ receivingCall, callAccepted, name, answerCall }) => {\n  return receivingCall && !callAccepted ? (\n    <Box textAlign=\"center\">\n      <Heading size=\"md\" mb={4}>\n        {name} is calling...\n      </Heading>\n      <Button colorScheme=\"green\" leftIcon={<BellIcon />} onClick={answerCall}>\n        Answer\n      </Button>\n    </Box>\n  ) : null\n}\n\nCallControls.propTypes = {\n  receivingCall: PropTypes.bool.isRequired,\n  callAccepted: PropTypes.bool.isRequired,\n  name: PropTypes.string.isRequired,\n  answerCall: PropTypes.func.isRequired,\n}\n\nexport default CallControls\n","import axios from '../utils/axios'\n\nconst getList = async () => {\n  const result = await axios.get('/api/users/list')\n  return result.data\n}\n\nexport default getList\n","import { useState, useEffect, useRef, useCallback } from 'react'\nimport Peer from 'simple-peer'\nimport { useSocket } from '../../context/socket-context'\nimport getList from '../../services/getListUsers'\nimport { logError, notifyUser } from '../services'\n\nfunction useCall() {\n  const { socket, socketId } = useSocket()\n\n  const [me, setMe] = useState('')\n  const [stream, setStream] = useState(null)\n  const [receivingCall, setReceivingCall] = useState(false)\n  const [caller, setCaller] = useState('')\n  const [callerSignal, setCallerSignal] = useState(null)\n  const [callAccepted, setCallAccepted] = useState(false)\n  const [callEnded, setCallEnded] = useState(false)\n  const [name, setName] = useState('')\n  const [listUsers, setListUsers] = useState([])\n  const myVideo = useRef(null)\n  const opponentVideo = useRef()\n  const connectionRef = useRef()\n\n  const fetchUserList = useCallback(async () => {\n    const res = await getList()\n    setListUsers(res.list || [])\n  }, [])\n\n  useEffect(() => {\n    fetchUserList().then()\n  }, [fetchUserList])\n\n  useEffect(() => {\n    socket.on('callUser', (data) => {\n      setReceivingCall(true)\n      setCaller(data.from)\n      setCallerSignal(data.signal)\n    })\n\n    return () => {\n      socket.off('callUser')\n    }\n  }, [socket])\n\n  useEffect(() => {\n    setMe(socketId)\n  }, [socketId])\n\n  // UseEffect to update video element\n  useEffect(() => {\n    if (myVideo.current && stream) {\n      myVideo.current.srcObject = stream\n    }\n  }, [stream]) // This will run when `stream` updates\n\n  const callUser = (id) => {\n    navigator.mediaDevices\n      .getUserMedia({ video: true, audio: true })\n      .then((currentStream) => {\n        if (!currentStream) {\n          notifyUser('Unable to access your camera and microphone')\n          return\n        }\n        setStream(currentStream)\n        setCallAccepted(true)\n\n        // Assign current stream to myVideo directly here\n        if (myVideo.current) {\n          myVideo.current.srcObject = currentStream\n        }\n\n        const peer = new Peer({\n          initiator: true,\n          trickle: false,\n          stream: currentStream,\n        })\n\n        peer.on('signal', (data) => {\n          socket.emit('callUser', {\n            userToCall: id,\n            signalData: data,\n            from: me,\n            name,\n          })\n        })\n\n        peer.on('stream', (opponentStream) => {\n          if (opponentVideo.current) {\n            opponentVideo.current.srcObject = opponentStream\n          }\n        })\n\n        peer.on('error', (err) => logError(err))\n\n        socket.on('callAccepted', (signal) => {\n          setCallAccepted(true)\n          peer.signal(signal)\n        })\n\n        connectionRef.current = peer\n      })\n      .catch((error) => logError(error))\n  }\n\n  const answerCall = () => {\n    navigator.mediaDevices\n      .getUserMedia({ video: true, audio: true })\n      .then((currentStream) => {\n        if (!currentStream) {\n          notifyUser('Unable to access your camera and microphone')\n          return\n        }\n        setStream(currentStream)\n        setCallAccepted(true)\n\n        if (myVideo.current) {\n          myVideo.current.srcObject = currentStream\n        }\n\n        const peer = new Peer({\n          initiator: false,\n          trickle: false,\n          stream: currentStream,\n        })\n\n        peer.on('signal', (data) => {\n          socket.emit('answerCall', { signal: data, to: caller })\n        })\n\n        peer.on('stream', (opponentStream) => {\n          if (opponentVideo.current) {\n            opponentVideo.current.srcObject = opponentStream\n          }\n        })\n\n        peer.on('error', (err) => logError(err))\n\n        peer.signal(callerSignal)\n        connectionRef.current = peer\n      })\n      .catch((error) => {\n        logError(error)\n        return null\n      })\n  }\n\n  const endCall = () => {\n    setCallEnded(true)\n    if (stream) {\n      stream.getTracks().forEach((track) => track.stop())\n    }\n    setReceivingCall(false)\n    setCaller('')\n    setCallerSignal(null)\n    setCallAccepted(false)\n    socket.off('callAccepted')\n  }\n\n  return {\n    me,\n    stream,\n    receivingCall,\n    caller,\n    callerSignal,\n    callAccepted,\n    callEnded,\n    name,\n    setName,\n    listUsers,\n    myVideo,\n    opponentVideo,\n    callUser,\n    answerCall,\n    endCall,\n  }\n}\n\nexport default useCall\n","import React, { useEffect, useState } from 'react'\nimport { Box, Button, IconButton, Text, VStack } from '@chakra-ui/react'\nimport { CloseIcon, PhoneIcon } from '@chakra-ui/icons'\nimport { useSocket } from '../../../context/socket-context'\n\n// eslint-disable-next-line react/display-name,react/prop-types\nconst ListUsers = React.memo(({ list, callAccepted, callEnded, callUser, endCall }) => {\n  const { socket, socketId } = useSocket()\n  const [usersList, setUsersList] = useState(list)\n\n  useEffect(() => {\n    setUsersList(list)\n  }, [list])\n\n  useEffect(() => {\n    if (socket) {\n      socket.on('updateUserSocket', (updatedUser) => {\n        setUsersList((prevList) =>\n          prevList.map((user) =>\n            user.id === updatedUser.userId ? { ...user, idSocketIO: updatedUser.idSocketIO } : user,\n          ),\n        )\n      })\n    }\n\n    return () => {\n      if (socket) {\n        socket.off('updateUserSocket')\n      }\n    }\n  }, [socket])\n\n  return (\n    <VStack align=\"stretch\">\n      {usersList && usersList.length > 0 ? (\n        usersList.map((user) => (\n          <Box key={user.id} p={1} borderWidth={1} borderRadius=\"lg\" bg=\"white\" color=\"black\">\n            <Text fontWeight=\"bold\">\n              {user.username} {user.surname}\n            </Text>\n            <Text>{user.email}</Text>\n            <Text>{user.idSocketIO}</Text>\n            <VStack spacing={4} mb={4}>\n              {callAccepted && !callEnded && user.idSocketIO === socketId ? (\n                <Button colorScheme=\"red\" leftIcon={<CloseIcon />} onClick={endCall}>\n                  End Call\n                </Button>\n              ) : (\n                <IconButton\n                  colorScheme=\"blue\"\n                  aria-label=\"call\"\n                  icon={<PhoneIcon />}\n                  onClick={() => callUser(user.idSocketIO)}\n                />\n              )}\n            </VStack>\n          </Box>\n        ))\n      ) : (\n        <Text>No users available</Text>\n      )}\n    </VStack>\n  )\n})\n\nexport default ListUsers\n","import React from 'react'\nimport { Box, Flex, Heading, Spacer } from '@chakra-ui/react'\nimport Container from '../../../layouts/Container'\nimport VideoBox from './VideoBox'\nimport CallControls from './CallControls'\nimport useCall from '../../../utils/hooks/useCall'\nimport ListUsers from './ListUsers'\n\nconst CallMe = () => {\n  const {\n    stream,\n    callAccepted,\n    callEnded,\n    callerSignal,\n    myVideo,\n    opponentVideo,\n    callUser,\n    answerCall,\n    endCall,\n    listUsers,\n    name,\n  } = useCall()\n\n  return (\n    <Box bg=\"#282c34\" color=\"#fff\" minH=\"calc=100vh-200px\" py={10}>\n      <Heading textAlign=\"center\" mb={10}>\n        Zoomish\n      </Heading>\n      <Container>\n        <Flex direction=\"row\" w=\"full\" wrap=\"wrap\" justifyContent=\"center\">\n          <Flex mb={8} position=\"relative\">\n            {stream && (\n              <>\n                ME\n                <VideoBox streamRef={myVideo} isOpponent={false} />\n              </>\n            )}\n            {callAccepted && !callEnded && (\n              <>\n                OPP\n                <VideoBox streamRef={opponentVideo} isOpponent />\n              </>\n            )}\n          </Flex>\n          <CallControls\n            receivingCall={!!callerSignal}\n            callAccepted={callAccepted}\n            callEnded={callEnded}\n            answerCall={answerCall}\n            endCall={endCall}\n            name={name}\n          />\n          <Spacer />\n          <ListUsers\n            list={listUsers}\n            callAccepted={callAccepted}\n            callEnded={callEnded}\n            callUser={callUser}\n            endCall={endCall}\n          />\n        </Flex>\n      </Container>\n    </Box>\n  )\n}\n\nexport default CallMe\n","import React from 'react'\nimport { Box } from '@chakra-ui/react'\nimport Container from '../../layouts/Container'\nimport Page from '../../components/Page'\nimport CallMe from './components/CallMe'\n\nconst CallDefault = () => {\n  return (\n    <Page>\n      <Container>\n        <Box bg=\"white\" padding=\"4\">\n          <CallMe />\n        </Box>\n      </Container>\n    </Page>\n  )\n}\n\nexport default CallDefault\n"],"names":["_ref","streamRef","isOpponent","_jsx","Draggable","children","Box","h","w","rounded","position","flexShrink","overflow","bg","mx","ref","playsInline","muted","autoPlay","style","maxWidth","objectFit","borderRadius","transform","width","height","kind","receivingCall","callAccepted","name","answerCall","_jsxs","textAlign","Heading","size","mb","Button","colorScheme","leftIcon","BellIcon","onClick","async","axios","get","data","socket","socketId","useSocket","me","setMe","useState","stream","setStream","setReceivingCall","caller","setCaller","callerSignal","setCallerSignal","setCallAccepted","callEnded","setCallEnded","setName","listUsers","setListUsers","myVideo","useRef","opponentVideo","connectionRef","fetchUserList","useCallback","res","getList","list","useEffect","then","on","from","signal","off","current","srcObject","callUser","id","navigator","mediaDevices","getUserMedia","video","audio","currentStream","notifyUser","peer","Peer","initiator","trickle","emit","userToCall","signalData","opponentStream","err","logError","catch","error","to","endCall","getTracks","forEach","track","stop","React","usersList","setUsersList","updatedUser","prevList","map","user","userId","_objectSpread","idSocketIO","VStack","align","length","p","borderWidth","color","Text","fontWeight","username","surname","email","spacing","CloseIcon","IconButton","icon","PhoneIcon","CallMe","useCall","minH","py","Container","Flex","direction","wrap","justifyContent","_Fragment","VideoBox","CallControls","Spacer","ListUsers","CallDefault","Page","padding"],"sourceRoot":""}