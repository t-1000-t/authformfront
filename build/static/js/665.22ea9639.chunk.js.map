{"version":3,"file":"static/js/665.22ea9639.chunk.js","mappings":"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","sources":["pages/Call/components/CallMe.js","pages/Call/index.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\r\nimport Peer from 'simple-peer'\r\n// import { useVideoChat } from '../../../utils/hooks/useVideoChat'\r\nimport { useSocket } from '../../../context/socket-context'\r\n// import useAuthStore from '../../../store/useAuthStore'\r\nimport { Box, Button, IconButton, Text, Textarea } from '@chakra-ui/react'\r\nimport { BellIcon, PhoneIcon } from '@chakra-ui/icons'\r\n\r\nimport process from 'process'\r\n\r\nwindow.process = process\r\n\r\nexport default function CallMe() {\r\n  const socket = useSocket()\r\n\r\n  const [me, setMe] = useState(\"\")\r\n  const [stream, setStream] = useState(null)\r\n  const [receivingCall, setReceivingCall] = useState(false)\r\n  const [caller, setCaller] = useState(\"\")\r\n  const [callerSignal, setCallerSignal] = useState(null)\r\n  const [callAccepted, setCallAccepted] = useState(false)\r\n  const [idToCall, setIdToCall] = useState(\"\")\r\n  const [callEnded, setCallEnded] = useState(false)\r\n  const [name] = useState(\"VLAD\")\r\n  const myVideo = useRef(null)\r\n  const opponentVideo = useRef(null)\r\n  const connectionRef = useRef(null)\r\n\r\n\r\n  useEffect(() => {\r\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((currentStream) => {\r\n      setStream(currentStream)\r\n      if (myVideo.current) {\r\n        myVideo.current.srcObject = currentStream\r\n      }\r\n    }).catch(error => console.error('Error accessing media devices.', error))\r\n\r\n    socket.on(\"me\", (id) => {\r\n      console.log('me ID', id)\r\n      setMe(id)\r\n    })\r\n\r\n    socket.on(\"callUser\", (data) => {\r\n      setReceivingCall(true)\r\n      setCaller(data.from)\r\n      setCallerSignal(data.signal)\r\n    })\r\n\r\n    return () => {\r\n      socket.off(\"me\")\r\n      socket.off(\"callUser\")\r\n    }\r\n  }, [socket])\r\n\r\n  useEffect(() => {\r\n    console.log('0')\r\n    if (stream && myVideo.current) {\r\n      console.log('1')\r\n      myVideo.current.srcObject = stream\r\n    }\r\n    console.log('2')\r\n    setMe(socket.id)\r\n\r\n  }, [stream, socket.id, socket])\r\n\r\n  const callUser = (id) => {\r\n    const peer = new Peer({\r\n      initiator: true,\r\n      trickle: false,\r\n      stream: stream,\r\n    });\r\n\r\n    peer.on(\"signal\", (data) => {\r\n      socket.emit(\"callUser\", {\r\n        userToCall: id,\r\n        signalData: data,\r\n        from: me,\r\n        name: name,\r\n      })\r\n    })\r\n\r\n    peer.on(\"stream\", (currentStream) => {\r\n      opponentVideo.current.srcObject = currentStream\r\n    })\r\n\r\n    peer.on('error', err => console.error('Peer error:', err))\r\n\r\n    socket.on(\"callAccepted\", (signal) => {\r\n      setCallAccepted(true)\r\n      peer.signal(signal)\r\n    })\r\n\r\n    connectionRef.current = peer\r\n  }\r\n\r\n  const answerCall = () => {\r\n    setCallAccepted(true)\r\n\r\n    const peer = new Peer({\r\n      initiator: false,\r\n      trickle: false,\r\n      stream: stream,\r\n    })\r\n\r\n    peer.on(\"signal\", (data) => {\r\n      socket.emit(\"answerCall\", { signal: data, to: caller })\r\n    })\r\n\r\n    peer.on(\"stream\", (currentStream) => {\r\n      if (opponentVideo.current) {\r\n        opponentVideo.current.srcObject = currentStream\r\n      }\r\n    })\r\n\r\n    peer.on('error', err => console.error('Peer error:', err))\r\n\r\n    peer.signal(callerSignal)\r\n    connectionRef.current = peer\r\n  }\r\n\r\n  const endCall = () => {\r\n    setCallEnded(true)\r\n    if (connectionRef.current) {\r\n      connectionRef.current.destroy() // This will close the peer connection\r\n    }\r\n    if (stream) {\r\n      stream.getTracks().forEach(track => track.stop()) // This will stop the local stream tracks\r\n    }\r\n    setReceivingCall(false)\r\n    setCaller(\"\")\r\n    setCallerSignal(null)\r\n    setCallAccepted(false)\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (connectionRef.current) {\r\n        connectionRef.current.destroy()\r\n      }\r\n      if (stream) {\r\n        stream.getTracks().forEach(track => track.stop())\r\n      }\r\n    }\r\n  }, [stream])\r\n\r\n  return (\r\n    <>\r\n      <h1 style={{ textAlign: \"center\", color: '#fff' }}>Zoomish</h1>\r\n      <div className=\"container\">\r\n        <div className=\"video-container\">\r\n          {callAccepted && (\r\n            <Box\r\n              h=\"136px\"\r\n              w=\"136px\"\r\n              rounded=\"full\"\r\n              position=\"relative\"\r\n              flexShrink={0}\r\n            >\r\n              <Box overflow=\"hidden\" h=\"100%\" w=\"100%\" rounded=\"full\">\r\n                <video\r\n                  playsInline\r\n                  ref={opponentVideo}\r\n                  autoPlay\r\n                  style={{\r\n                    maxWidth: '100%',\r\n                    objectFit: 'cover',\r\n                    borderRadius: '50%',\r\n                    transform: 'translate3d(0, 0, 0)',\r\n                    width: '136px',\r\n                    height: '136px',\r\n                  }}\r\n                />\r\n              </Box>\r\n            </Box>\r\n          )}\r\n          {stream && (\r\n            <Box\r\n              h=\"136px\"\r\n              w=\"136px\"\r\n              rounded=\"full\"\r\n              position=\"relative\"\r\n              flexShrink={0}\r\n              overflow=\"hidden\"\r\n            >\r\n              <Box overflow=\"hidden\" h=\"100%\" w=\"100%\" rounded=\"full\">\r\n                <video\r\n                  playsInline\r\n                  muted\r\n                  ref={myVideo}\r\n                  autoPlay\r\n                  style={{\r\n                    maxWidth: '100%',\r\n                    objectFit: 'cover',\r\n                    borderRadius: '50%',\r\n                    transform: 'translate3d(0, 0, 0)',\r\n                    width: '136px',\r\n                    height: '136px',\r\n                  }}\r\n                />\r\n              </Box>\r\n            </Box>\r\n          )}\r\n        </div>\r\n        <div className=\"myId\">\r\n          <Box>\r\n            <CopyToClipboard text={me} style={{ marginBottom: \"2rem\" }}>\r\n              <Button variant=\"contained\" color=\"primary\" startIcon={<BellIcon fontSize=\"large\" />}>\r\n                Copy ID\r\n              </Button>\r\n            </CopyToClipboard>\r\n            <Text>{me}</Text>\r\n          </Box>\r\n          <Textarea\r\n            style={{ width: \"20rem\" }}\r\n            id=\"filled-basic\"\r\n            label=\"ID to call\"\r\n            variant=\"filled\"\r\n            value={idToCall}\r\n            onChange={(e) => setIdToCall(e.target.value)}\r\n          />\r\n          <div className=\"call-button\">\r\n            {callAccepted && !callEnded ? (\r\n              <Button variant=\"contained\" color=\"secondary\" onClick={endCall}>\r\n                End Call\r\n              </Button>\r\n            ) : (\r\n              <IconButton color=\"primary\" aria-label=\"call\" onClick={() => callUser(idToCall)}>\r\n                <PhoneIcon fontSize=\"large\" />\r\n              </IconButton>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div>\r\n          {receivingCall && !callAccepted ? (\r\n            <div className=\"caller\">\r\n              <h1>{name} is calling...</h1>\r\n              <Button variant=\"contained\" color=\"primary\" onClick={answerCall}>\r\n                Answer\r\n              </Button>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n// return (\r\n  //   <Container maxW={'6xl'} py={24} px={{ base: 6, md: 12 }}>\r\n  //     <Box position=\"relative\" maxW=\"850px\" mx=\"auto\" mb={{ base: 4, md: 16 }}>\r\n  //       <Heading fontSize={{ base: '3xl', md: '4xl', lg: '6xl' }} textAlign={'center'} color=\"#204E78\">\r\n  //         PAGE of CALLER\r\n  //       </Heading>\r\n  //       <Text color={'gray.800'} fontSize={{ base: 'lg', sm: 'xl', md: '2xl' }} p={2} textAlign=\"center\">\r\n  //         Hello. CALL ME!\r\n  //       </Text>\r\n  //     </Box>\r\n  //\r\n  //     <Flex\r\n  //       rounded=\"lg\"\r\n  //       px={4}\r\n  //       ml={{ lg: 12, xl: 16 }}\r\n  //       mb={{ base: 8, lg: 0 }}\r\n  //       w=\"full\"\r\n  //       maxW={{ lg: 'lg' }}\r\n  //       direction=\"column\"\r\n  //       position=\"relative\"\r\n  //       textColor=\"blackAlpha.800\"\r\n  //       justify=\"space-between\"\r\n  //       align=\"start\"\r\n  //     >\r\n  //       {video.callAccepted && !video.callEnded ? (\r\n  //         <Box\r\n  //           h=\"136px\"\r\n  //           w=\"136px\"\r\n  //           rounded=\"full\"\r\n  //           position=\"relative\"\r\n  //           flexShrink={0}\r\n  //         >\r\n  //           <Box overflow=\"hidden\" h=\"100%\" w=\"100%\" rounded=\"full\">\r\n  //             <TimerCircle\r\n  //               totalTime={video.totalTime}\r\n  //               stream={video.opponentVideo}\r\n  //               endVideo={video.endVideo}\r\n  //               socket={socket}\r\n  //             />\r\n  //           </Box>\r\n  //         </Box>\r\n  //       ) : (\r\n  //         <Avatar h=\"136px\" w=\"136px\" />\r\n  //       )}\r\n  //\r\n  //       <Stack direction=\"row\" align=\"center\" spacing={8}>\r\n  //         {video.stream?.active ? (\r\n  //           <Box\r\n  //             h=\"136px\"\r\n  //             w=\"136px\"\r\n  //             rounded=\"full\"\r\n  //             position=\"relative\"\r\n  //             flexShrink={0}\r\n  //           >\r\n  //             <Box overflow=\"hidden\" h=\"100%\" w=\"100%\" rounded=\"full\">\r\n  //               <video\r\n  //                 playsInline\r\n  //                 muted\r\n  //                 id=\"myVideoId\"\r\n  //                 ref={video.myVideo}\r\n  //                 autoPlay\r\n  //                 style={{\r\n  //                   maxWidth: '100%',\r\n  //                   objectFit: 'cover',\r\n  //                   borderRadius: '50%',\r\n  //                   transform: 'translate3d(0, 0, 0)',\r\n  //                   width: '136px',\r\n  //                   height: '136px',\r\n  //                 }}\r\n  //               />\r\n  //             </Box>\r\n  //           </Box>\r\n  //         ) : ( <Avatar h=\"136px\" w=\"136px\" /> )}\r\n  //       </Stack>\r\n  //     </Flex>\r\n  //\r\n  //   </Container>\r\n  // )\r\n// }\r\n","import {Box} from '@chakra-ui/react'\r\nimport Page from 'components/Page'\r\n\r\nimport CallMe from './components/CallMe'\r\n\r\nexport default function AboutDefault() {\r\n  return (\r\n    <Page>\r\n      <Box bg=\"white\">\r\n        <CallMe />\r\n      </Box>\r\n    </Page>\r\n  )\r\n}\r\n"],"names":["CallMe","socket","useSocket","me","setMe","useState","stream","setStream","receivingCall","setReceivingCall","caller","setCaller","callerSignal","setCallerSignal","callAccepted","setCallAccepted","idToCall","setIdToCall","callEnded","setCallEnded","name","myVideo","useRef","opponentVideo","connectionRef","useEffect","navigator","mediaDevices","getUserMedia","video","audio","then","currentStream","current","srcObject","catch","error","console","on","id","log","data","from","signal","off","destroy","getTracks","forEach","track","stop","_jsxs","_Fragment","children","_jsx","style","textAlign","color","className","Box","h","w","rounded","position","flexShrink","overflow","playsInline","ref","autoPlay","maxWidth","objectFit","borderRadius","transform","width","height","muted","CopyToClipboard","text","marginBottom","Button","variant","startIcon","BellIcon","fontSize","Text","Textarea","label","value","onChange","e","target","onClick","endCall","IconButton","peer","Peer","initiator","trickle","emit","userToCall","signalData","err","callUser","PhoneIcon","answerCall","to","AboutDefault","Page","bg","window","process"],"sourceRoot":""}