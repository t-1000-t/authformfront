{"version":3,"file":"static/js/665.62a7c9ff.chunk.js","mappings":"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","sources":["pages/Call/components/CallMe.js","pages/Call/index.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\nimport Peer from 'simple-peer'\r\nimport { useSocket } from '../../../context/socket-context'\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Flex,\r\n  IconButton,\r\n  Input,\r\n  Text,\r\n  useClipboard,\r\n  VStack,\r\n  Heading,\r\n  useToast,\r\n} from '@chakra-ui/react'\r\nimport { PhoneIcon, CopyIcon, BellIcon, CloseIcon } from '@chakra-ui/icons'\r\nimport process from 'process'\r\n\r\nwindow.process = process\r\n\r\nexport default function CallMe() {\r\n  const socket = useSocket()\r\n\r\n  const [me, setMe] = useState('')\r\n  const [stream, setStream] = useState(null)\r\n  const [receivingCall, setReceivingCall] = useState(false)\r\n  const [caller, setCaller] = useState('')\r\n  const [callerSignal, setCallerSignal] = useState(null)\r\n  const [callAccepted, setCallAccepted] = useState(false)\r\n  const [idToCall, setIdToCall] = useState('')\r\n  const [callEnded, setCallEnded] = useState(false)\r\n  const [name] = useState('VLAD')\r\n  const myVideo = useRef(null)\r\n  const opponentVideo = useRef(null)\r\n  const connectionRef = useRef(null)\r\n\r\n  const { onCopy } = useClipboard(me)\r\n  const toast = useToast()\r\n\r\n  useEffect(() => {\r\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n      .then((currentStream) => {\r\n        setStream(currentStream)\r\n        if (myVideo.current) {\r\n          myVideo.current.srcObject = currentStream\r\n        }\r\n      })\r\n      .catch(error => console.error('Error accessing media devices.', error))\r\n\r\n    socket.on('me', (id) => {\r\n      setMe(id)\r\n    })\r\n\r\n    socket.on('callUser', (data) => {\r\n      setReceivingCall(true)\r\n      setCaller(data.from)\r\n      setCallerSignal(data.signal)\r\n    })\r\n\r\n    return () => {\r\n      socket.off('me')\r\n      socket.off('callUser')\r\n    }\r\n  }, [socket])\r\n\r\n  useEffect(() => {\r\n    if (stream && myVideo.current) {\r\n      myVideo.current.srcObject = stream\r\n    }\r\n    setMe(socket.id)\r\n  }, [stream, socket.id, socket])\r\n\r\n  const callUser = (id) => {\r\n    const peer = new Peer({\r\n      initiator: true,\r\n      trickle: false,\r\n      stream: stream,\r\n    })\r\n\r\n    peer.on('signal', (data) => {\r\n      socket.emit('callUser', {\r\n        userToCall: id,\r\n        signalData: data,\r\n        from: me,\r\n        name: name,\r\n      })\r\n    })\r\n\r\n    peer.on('stream', (currentStream) => {\r\n      if (opponentVideo.current) {\r\n        opponentVideo.current.srcObject = currentStream\r\n      }\r\n    })\r\n\r\n    peer.on('error', err => console.error('Peer error:', err))\r\n\r\n    socket.on('callAccepted', (signal) => {\r\n      setCallAccepted(true)\r\n      peer.signal(signal)\r\n    })\r\n\r\n    connectionRef.current = peer\r\n  }\r\n\r\n  const answerCall = () => {\r\n    setCallAccepted(true)\r\n\r\n    const peer = new Peer({\r\n      initiator: false,\r\n      trickle: false,\r\n      stream: stream,\r\n    })\r\n\r\n    peer.on('signal', (data) => {\r\n      socket.emit('answerCall', { signal: data, to: caller })\r\n    })\r\n\r\n    peer.on('stream', (currentStream) => {\r\n      if (opponentVideo.current) {\r\n        opponentVideo.current.srcObject = currentStream\r\n      }\r\n    })\r\n\r\n    peer.on('error', err => console.error('Peer error:', err))\r\n\r\n    peer.signal(callerSignal)\r\n    connectionRef.current = peer\r\n  }\r\n\r\n  const endCall = () => {\r\n    setCallEnded(true)\r\n    if (connectionRef.current) {\r\n      connectionRef.current.destroy()\r\n    }\r\n    if (stream) {\r\n      stream.getTracks().forEach(track => track.stop())\r\n    }\r\n    setReceivingCall(false)\r\n    setCaller('')\r\n    setCallerSignal(null)\r\n    setCallAccepted(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (connectionRef.current) {\r\n        connectionRef.current.destroy();\r\n      }\r\n      if (stream) {\r\n        stream.getTracks().forEach(track => track.stop())\r\n      }\r\n    }\r\n  }, [stream])\r\n\r\n  return (\r\n    <Box bg=\"#282c34\" color=\"#fff\" minH=\"100vh\" py={10}>\r\n      <Heading textAlign=\"center\" mb={10}>\r\n        Zoomish\r\n      </Heading>\r\n      <Container centerContent>\r\n        <Flex mb={8} justify=\"center\">\r\n          {callAccepted && !callEnded && (\r\n            <Box\r\n              h=\"136px\"\r\n              w=\"136px\"\r\n              rounded=\"full\"\r\n              position=\"relative\"\r\n              flexShrink={0}\r\n              overflow=\"hidden\"\r\n              bg=\"black\"\r\n              mx={2}\r\n            >\r\n              <video\r\n                playsInline\r\n                ref={opponentVideo}\r\n                autoPlay\r\n                style={{\r\n                  maxWidth: '100%',\r\n                  objectFit: 'cover',\r\n                  borderRadius: '50%',\r\n                  transform: 'translate3d(0, 0, 0)',\r\n                  width: '136px',\r\n                  height: '136px',\r\n                }}\r\n              />\r\n            </Box>\r\n          )}\r\n          {stream && (\r\n            <Box\r\n              h=\"136px\"\r\n              w=\"136px\"\r\n              rounded=\"full\"\r\n              position=\"relative\"\r\n              flexShrink={0}\r\n              overflow=\"hidden\"\r\n              bg=\"black\"\r\n              mx={2}\r\n            >\r\n              <video\r\n                playsInline\r\n                muted\r\n                ref={myVideo}\r\n                autoPlay\r\n                style={{\r\n                  maxWidth: '100%',\r\n                  objectFit: 'cover',\r\n                  borderRadius: '50%',\r\n                  transform: 'translate3d(0, 0, 0)',\r\n                  width: '136px',\r\n                  height: '136px',\r\n                }}\r\n              />\r\n            </Box>\r\n          )}\r\n        </Flex>\r\n        <VStack spacing={4} mb={8}>\r\n          <Button\r\n            leftIcon={<CopyIcon />}\r\n            colorScheme=\"blue\"\r\n            onClick={() => {\r\n              onCopy()\r\n              toast({\r\n                title: 'Copied',\r\n                description: 'Your ID has been copied.',\r\n                status: 'success',\r\n                duration: 2000,\r\n                isClosable: true,\r\n              })\r\n            }}\r\n          >\r\n            Copy ID\r\n          </Button>\r\n          <Text>{me}</Text>\r\n          <Input\r\n            width=\"20rem\"\r\n            variant=\"filled\"\r\n            placeholder=\"ID to call\"\r\n            value={idToCall}\r\n            onChange={(e) => setIdToCall(e.target.value)}\r\n          />\r\n          {callAccepted && !callEnded ? (\r\n            <Button\r\n              colorScheme=\"red\"\r\n              leftIcon={<CloseIcon />}\r\n              onClick={endCall}\r\n            >\r\n              End Call\r\n            </Button>\r\n          ) : (\r\n            <IconButton\r\n              colorScheme=\"blue\"\r\n              aria-label=\"call\"\r\n              icon={<PhoneIcon />}\r\n              onClick={() => callUser(idToCall)}\r\n            />\r\n          )}\r\n        </VStack>\r\n        {receivingCall && !callAccepted && (\r\n          <Box textAlign=\"center\">\r\n            <Heading size=\"md\" mb={4}>\r\n              {name} is calling...\r\n            </Heading>\r\n            <Button\r\n              colorScheme=\"green\"\r\n              leftIcon={<BellIcon />}\r\n              onClick={answerCall}\r\n            >\r\n              Answer\r\n            </Button>\r\n          </Box>\r\n        )}\r\n      </Container>\r\n    </Box>\r\n  )\r\n}\r\n","import {Box} from '@chakra-ui/react'\r\nimport Page from 'components/Page'\r\n\r\nimport CallMe from './components/CallMe'\r\n\r\nexport default function AboutDefault() {\r\n  return (\r\n    <Page>\r\n      <Box bg=\"white\">\r\n        <CallMe />\r\n      </Box>\r\n    </Page>\r\n  )\r\n}\r\n"],"names":["CallMe","socket","useSocket","me","setMe","useState","stream","setStream","receivingCall","setReceivingCall","caller","setCaller","callerSignal","setCallerSignal","callAccepted","setCallAccepted","idToCall","setIdToCall","callEnded","setCallEnded","name","myVideo","useRef","opponentVideo","connectionRef","onCopy","useClipboard","toast","useToast","useEffect","navigator","mediaDevices","getUserMedia","video","audio","then","currentStream","current","srcObject","catch","error","console","on","id","data","from","signal","off","destroy","getTracks","forEach","track","stop","_jsxs","Box","bg","color","minH","py","children","_jsx","Heading","textAlign","mb","Container","centerContent","Flex","justify","h","w","rounded","position","flexShrink","overflow","mx","playsInline","ref","autoPlay","style","maxWidth","objectFit","borderRadius","transform","width","height","muted","VStack","spacing","Button","leftIcon","CopyIcon","colorScheme","onClick","title","description","status","duration","isClosable","Text","Input","variant","placeholder","value","onChange","e","target","CloseIcon","endCall","IconButton","icon","PhoneIcon","peer","Peer","initiator","trickle","emit","userToCall","signalData","err","callUser","size","BellIcon","answerCall","to","AboutDefault","Page","window","process"],"sourceRoot":""}